* {
	box-sizing: border-box;
}

/* Simple Responsive Framework. */

.container {
    padding-right: 15px;
    padding-left: 15px;
    margin-right: auto;
    margin-left: auto;
}

.row {
	width: 100%;
}

$col-total: 12; // map of key = size abbreviation, value = min-width
$breakpointsMap: (lg: 1200px, md: 992px, sm: 768px, xs: null);

@function getBreakpointsList ($map) {
	// list of lists (name min-width max-width)
	$list: ();
	$prevV: null;
	@each $k, $v in $map {
		$list: append($list, $k $v $prevV);
		@if $v {
			$prevV: $v - 1;
		}
	}
	@return $list;
}

@function decimal-round ($number, $digits: 0, $mode: round) {
	$n: 1;
	// $number must be a number
	@if type-of($number) != number {
		 @warn'#{ $number } is not a number.';
		@return $number;
	}
	// $digits must be a unitless number
	@if type-of($digits) != number {
		 @warn'#{ $digits } is not a number.';
		@return $number;
	}
	@else if not unitless($digits) {
		 @warn'#{ $digits } has a unit.';
		@return $number;
	}
	@for $i from 1 through $digits {
		$n: $n * 10;
	}
	@if $mode == round {
		 @return round($number * $n) / $n;
	}
	@else if $mode == ceil {
		 @return ceil($number * $n) / $n;
	}
	@else if $mode == floor {
		 @return floor($number * $n) / $n;
	}
	@else {
		 @warn'#{ $mode } is undefined keyword.';
		@return $number;
	}
}

@function decimal-ceil ($number, $digits: 0) {
	 @return decimal-round($number, $digits, ceil);
}
@function decimal-floor ($number, $digits: 0) {
	 @return decimal-round($number, $digits, floor);
}


@mixin breakpoint($min, $max) {
	 @if $max and $min{
		@media (min-width: $min) and (max-width: $max) {
			 @content;
		}
	}
	@else if $min {
		 @media (min-width: $min){
			@content;
		}
	}
	@else if $max {
		 @media (max-width: $max){
			@content;
		}
	}
}


@each $nm, $min-width, $max-width in getBreakpointsList($breakpointsMap) {
	 @include breakpoint($min-width, $max-width){
		$l: ();
		@for $i from 1 through $col-total {
			$el: '.col-#{$nm}-#{$i}';
			$l: append($l, $el, comma);
			#{$el} {
				width: decimal-floor(100% * $i / $col-total, 2);
			}
		}
		#{$l} {
			float: left;
		}
	}
}
